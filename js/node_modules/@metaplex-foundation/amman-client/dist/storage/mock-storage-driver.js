"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadBuffer = exports.ammanMockStorageDriver = exports.ammanMockStorage = void 0;
const log_1 = require("../utils/log");
const consts_1 = require("./consts");
const sdk_types_1 = require("./sdk-types");
const { logError, logDebug } = (0, log_1.scopedLog)('mock-storage');
const ammanMockStorage = (storageId, costPerByte) => ({
    install(metaplex /* Metaplex */) {
        const driver = ammanMockStorageDriver(storageId, costPerByte);
        metaplex.storage().setDriver(driver);
    },
});
exports.ammanMockStorage = ammanMockStorage;
function ammanMockStorageDriver(storageId, costPerByte) {
    return new AmmanMockStorageDriver(storageId, costPerByte);
}
exports.ammanMockStorageDriver = ammanMockStorageDriver;
class AmmanMockStorageDriver {
    constructor(storageId = consts_1.AMMAN_DEFAULT_MOCK_STORAGE_ID, costPerByte = 1) {
        this.storageId = storageId;
        this.costPerByte = costPerByte;
        this.cache = {};
        this.getUploadPrice = (bytes) => {
            const price = bytes * this.costPerByte;
            const amount = (0, sdk_types_1.sol)(price);
            return Promise.resolve(amount);
        };
        this.upload = async (file) => {
            const resourceName = file.uniqueName;
            const uploadUri = `${this.baseUploadUrl}/${resourceName}`;
            const resourceUri = `${this.baseResourceUrl}/${resourceName}`;
            const buf = file.buffer;
            await uploadBuffer(uploadUri, buf);
            logDebug(`Uploaded ${file.displayName}:${file.uniqueName}`);
            this.cache[resourceUri] = file;
            return resourceUri;
        };
        this.uploadAll = async (files) => {
            return Promise.all(files.map(this.upload));
        };
        this.download = (uri, _options) => {
            const file = this.cache[uri];
            if (file == null) {
                throw new Error(`Asset for ${uri} not found`);
            }
            return Promise.resolve(file);
        };
        this.baseResourceUrl = AmmanMockStorageDriver.getStorageUri(storageId);
        this.baseUploadUrl = AmmanMockStorageDriver.getUploadToStorageUri(storageId);
        logDebug(`Amman Storage Driver for ${this.baseResourceUrl} initialized`);
    }
}
AmmanMockStorageDriver.getStorageUri = (storageId) => `${consts_1.AMMAN_STORAGE_URI}/${storageId}`;
AmmanMockStorageDriver.getUploadToStorageUri = (storageId) => `${consts_1.AMMAN_STORAGE_UPLOAD_URI}/${storageId}`;
// -----------------
// Helpers
// -----------------
async function uploadBuffer(url, buf) {
    const byteSize = buf.byteLength;
    try {
        const res = await fetch(url, {
            method: 'POST',
            headers: {
                contentLength: `${byteSize}`,
            },
            body: buf,
        });
        await res.text();
        return res;
    }
    catch (err) {
        logError(`Error uploading ${url}`);
        logError(err);
    }
}
exports.uploadBuffer = uploadBuffer;
//# sourceMappingURL=mock-storage-driver.js.map